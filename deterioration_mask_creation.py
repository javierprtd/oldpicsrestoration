# -*- coding: utf-8 -*-
"""Deterioration_mask_creation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/rdestenay/oldpicsrestoration/blob/master/Deterioration_mask_creation.ipynb
"""

import argparse
import numpy as np
import random
from PIL import Image, ImageFilter
import os
import time
import matplotlib.pyplot as plt

def random_walk(canvas, ini_x, ini_y, length, momentum):
    img_size = canvas.shape[-1]
    x_list = []
    y_list = []
    x2 = ini_x
    y2 = ini_y
    direction=0
    for i in range(length):
        if i % 1500 == 0:
            x = random.randint(0, 256 - 1)
            y = random.randint(0, 256 - 1)
            xsign = random.randint(0, 1)
            ysign = random.randint(0, 1)
            inirand = np.random.rand()*2*np.pi
            xdir = np.cos(inirand)
            ydir = np.sin(inirand)

        currand = np.sqrt(np.random.rand()*np.random.rand())*2*np.pi
        direction = direction*0.8 + currand *2*np.pi*(1-0.8)
        xdir = xdir*momentum + np.cos(currand)*(1-momentum)*(2*xsign-1)
        ydir = ydir*momentum + np.sin(currand)*(1-momentum)*(2*ysign-1)
        x = np.clip(x + xdir, a_min=0, a_max=img_size - 1)
        y = np.clip(y + ydir, a_min=0, a_max=img_size - 1)
        x2 = np.clip(x2 + np.cos(direction), a_min=0, a_max=img_size - 1)
        y2 = np.clip(y2 + np.sin(direction), a_min=0, a_max=img_size - 1)
        x_list.append(int(x))
        y_list.append(int(y))
        x_list.append(int(x2))
        y_list.append(int(y2))
    canvas[np.array(x_list), np.array(y_list)] = 1
    return canvas

def blur(img, blurradius=5):    
    out = Image.blend(img, img.filter(ImageFilter.GaussianBlur(blurradius)),1)
    return out

def vignette(size, params=[]):
    valx = []
    valy = []
    for x in range(size):
        if x < params[0]:
            valx.append((params[0]-x) / params[0])
        elif size-x < params[2]:
            valx.append((params[2]-(size-x)+1) / params[2])  
        else:
            valx.append(0)         
    for y in range(size):
        if y < params[1]:
            valy.append((params[1]-y) / params[1])
        elif size-y < params[3]:
            valy.append((params[3]-(size-y)+1) / params[3])  
        else:
            valy.append(0) 
    return np.add.outer(valx,valy)-np.outer(valx,valy)

start = time.time()
imgarray = []

for i in range(10000):
    vi1 = random.randint(1, 120)
    vi2 = random.randint(1, 120)
    vi3 = random.randint(1, 120)
    vi4 = random.randint(1, 120)
    canvas = vignette(512, [vi1,vi2,vi3,vi4])
    ini_x = random.randint(0, 512 - 1)
    ini_y = random.randint(0, 512 - 1)
    mask = random_walk(canvas, ini_x, ini_y, 7500, 0.992)
    dilatation = random.randint(1, 10)*2- 1
    color = random.randint(170, 255)
    blurradius = random.randint(1, 20)
    img = blur(Image.fromarray(mask * color).convert('L').resize((1024,1024), Image.BICUBIC).filter(ImageFilter.MaxFilter(dilatation)),blurradius)    
    img.save('{:s}/{:d}/{:06d}.jpg'.format("masks", 1024, i))
    for size in [512,256,128,64,32,16]:
        img = img.resize((size,size))
        img.save('{:s}/{:d}/{:06d}.jpg'.format("masks", size, i))
end = time.time()
(end - start)

f, axarr = plt.subplots(5, 4, figsize=(40,50))
axarr = axarr.ravel()
for i in range(20):
    axarr[i].imshow(imgarray[i])
plt.show()

vignette(512, [50,20,30,100]).astype("i")

