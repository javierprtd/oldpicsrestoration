# -*- coding: utf-8 -*-
"""Image_deterioration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/rdestenay/oldpicsrestoration/blob/master/Image_deterioration.ipynb
"""

import numpy as np
from os import path
import pandas as pd
import glob
from PIL import ImageFilter, ImageMath, ImageOps, Image
import time
import matplotlib.pyplot as plt
from fastai.vision import image, transform
import torch
from torch.autograd import Variable
from torch.nn import functional as F
KERNEL = Variable(torch.FloatTensor([[[[0.0625, 0.125, 0.0625],[0.125,0.25,0.125],[0.0625, 0.125, 0.0625]]]]))

def addmask(img, i):
    mask = image.open_image('{:s}/{:06d}.jpg'.format("masks", i),convert_mode="L")
    img.px = torch.max(img.px,mask.px)
    return img

def addgrain(img, i, alpha):
    grain = image.open_image('{:s}/{:06d}.jpg'.format("grains", i),convert_mode="L")
    img.px = torch.mul(img.px,grain.px*alpha+(1-alpha))
    return img

def deterioration(img, index, contrast=1, brightness=0.5, grainalpha=0): 
    out = img.clone()
    #addgrain(out,index, grainalpha)
    out.contrast(contrast).brightness(brightness)
    #addmask(out,index)
    return out

def randomdeterioration(img, index):
    rnd = np.random.randn(3)
    contrast = np.clip(rnd[0]*0.5+1, a_min=0.4, a_max=3)
    brightness = np.clip(rnd[1]*0.25+0.5, a_min=0.2, a_max=0.8)
    grainalpha = np.clip(rnd[2]*0.25+0.5, a_min=0, a_max=1)*0.2
    return deterioration(img, index, contrast, brightness, grainalpha)

def loguniform(low=0, high=1, size=None):
    return np.exp(np.random.uniform(np.log(low), np.log(high), size))

def expuniform(low=0, high=1, size=None):
    return np.log(np.random.uniform(np.exp(low), np.exp(high), size))

data=[]
for filename in glob.glob('color/*.jpg'):
    im=image.open_image(filename,convert_mode='L')
    
    contrast = np.random.uniform(0.5, 3)
    brightness = np.random.uniform(0.2, 0.8)
#    contrast = np.clip(rnd[0]*0.5+1, a_min=0.4, a_max=3)
#    brightness = np.clip(rnd[1]*0.25+0.5, a_min=0.2, a_max=0.8)
    data.append([path.basename(filename),contrast,brightness])
    im=deterioration(im,0,contrast,brightness)
    im.save("deteriorated/"+path.basename(filename))

df = pd.DataFrame(columns=["image","contrasts","brightness"], data=data)
df.head()

df.set_index("image").to_csv("deteriorated/data.csv")

